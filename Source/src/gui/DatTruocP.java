/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import daoImpl.ICustomerImpl;
import daoImpl.IReservationImpl;
import daoImpl.IRoomImpl;
import entities.Customer;
import entities.Reservation;
import entities.Room;
import entities._Account;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author User
 */
public class DatTruocP extends javax.swing.JFrame {

    /**
     * Creates new form Reception
     */
    public static DatTruocP it;

    public DatTruocP() {
        initComponents();
        it = this;
        initModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCusNameS = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCusGoIDS = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSelectRoom = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ckbDeposit = new javax.swing.JCheckBox();
        btnSelectCus = new javax.swing.JButton();
        txtCustomer = new javax.swing.JTextField();
        dcsExpectedCheckIn = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        dcsExpectedCheckOut = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtExpectedRoom = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grViewReservation = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnCheckin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "TÌM"));

        jLabel1.setText("TÊN KHÁCH HÀNG");

        txtCusNameS.setMaximumSize(new java.awt.Dimension(300, 20));
        txtCusNameS.setPreferredSize(new java.awt.Dimension(285, 20));

        jLabel6.setText("SỐ CMT");

        txtCusGoIDS.setMaximumSize(new java.awt.Dimension(300, 20));
        txtCusGoIDS.setPreferredSize(new java.awt.Dimension(285, 20));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addGap(72, 72, 72)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCusNameS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCusGoIDS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCusNameS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCusGoIDS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "ĐẶT PHÒNG TRƯỚC"));

        jLabel2.setText("NGÀY NHẬN PHÒNG");

        jLabel3.setText("KHÁCH HÀNG");

        btnSelectRoom.setText("PHÒNG");
        btnSelectRoom.setEnabled(false);
        btnSelectRoom.setPreferredSize(new java.awt.Dimension(101, 23));
        btnSelectRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectRoomActionPerformed(evt);
            }
        });

        jLabel4.setText("Tiền gửi");

        jLabel5.setText("Phòng dự kiến");

        btnSelectCus.setText("CHỌN");
        btnSelectCus.setEnabled(false);
        btnSelectCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectCusActionPerformed(evt);
            }
        });

        txtCustomer.setPreferredSize(new java.awt.Dimension(285, 20));

        dcsExpectedCheckIn.setDateFormatString("yyyy/MM/dd");
        dcsExpectedCheckIn.setEnabled(false);

        jLabel8.setText("NGÀY TRẢ PHÒNG");

        dcsExpectedCheckOut.setDateFormatString("yyyy/MM/dd");
        dcsExpectedCheckOut.setEnabled(false);

        txtExpectedRoom.setColumns(20);
        txtExpectedRoom.setRows(5);
        jScrollPane2.setViewportView(txtExpectedRoom);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3))
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dcsExpectedCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dcsExpectedCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ckbDeposit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSelectRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSelectCus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectCus)
                    .addComponent(jLabel3)
                    .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dcsExpectedCheckIn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(dcsExpectedCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(btnSelectRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ckbDeposit)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grViewReservation.setAutoCreateRowSorter(true);
        grViewReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Khách hàng", "Ngày nhận", "Ngày trả", "Loại phòng", "Is deposit", "reserID", "CMND"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grViewReservation.getTableHeader().setReorderingAllowed(false);
        grViewReservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grViewReservationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(grViewReservation);
        if (grViewReservation.getColumnModel().getColumnCount() > 0) {
            grViewReservation.getColumnModel().getColumn(5).setMinWidth(0);
            grViewReservation.getColumnModel().getColumn(5).setPreferredWidth(0);
            grViewReservation.getColumnModel().getColumn(5).setMaxWidth(0);
            grViewReservation.getColumnModel().getColumn(6).setMinWidth(0);
            grViewReservation.getColumnModel().getColumn(6).setPreferredWidth(0);
            grViewReservation.getColumnModel().getColumn(6).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(178, 208, 254));

        btnSearch.setBackground(new java.awt.Color(51, 204, 255));
        btnSearch.setText("TÌM KIẾM");
        btnSearch.setPreferredSize(new java.awt.Dimension(90, 43));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(51, 153, 255));
        btnAdd.setText("THÊM");
        btnAdd.setPreferredSize(new java.awt.Dimension(90, 43));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdate.setText("SỬA");
        btnUpdate.setPreferredSize(new java.awt.Dimension(90, 43));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(51, 153, 255));
        btnDelete.setText("XÓA");
        btnDelete.setPreferredSize(new java.awt.Dimension(90, 43));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(51, 153, 255));
        btnReset.setText("CẬP NHẬT");
        btnReset.setPreferredSize(new java.awt.Dimension(90, 43));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(51, 153, 255));
        btnBack.setText("BACK");
        btnBack.setPreferredSize(new java.awt.Dimension(90, 43));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnCheckin.setBackground(new java.awt.Color(51, 153, 255));
        btnCheckin.setText("CHECK IN");
        btnCheckin.setPreferredSize(new java.awt.Dimension(90, 43));
        btnCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectCusActionPerformed
        if (!btnSearch.isEnabled() && btnUpdate.isEnabled()) {
            if (grViewReservation.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một phòng đặt trước khi chọn khách hàng.");
                return;
            }
        }
        ChonKH sc = new ChonKH();
        sc.setFrom(1, "reser");
        sc.setMax(1);
        sc.setLocationRelativeTo(this);
        sc.setVisible(true);
    }//GEN-LAST:event_btnSelectCusActionPerformed

    private void btnSelectRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectRoomActionPerformed
        if (!btnSearch.isEnabled() && btnUpdate.isEnabled()) {
            if (grViewReservation.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một phòng đặt trước khi chọn phòng");
                return;
            }
        }
        ChonPhong sr = new ChonPhong();
        sr.setFrom(0, "reser");
        sr.setMax(20);
        sr.setDatex(dcsExpectedCheckIn.getDate(), dcsExpectedCheckOut.getDate());
        sr.setLocationRelativeTo(this);
        sr.setVisible(true);
    }//GEN-LAST:event_btnSelectRoomActionPerformed

    private void grViewReservationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grViewReservationMouseClicked
        if (!btnSearch.isEnabled() && btnUpdate.isEnabled()) {
            int i = grViewReservation.getSelectedRow();
            if (i > -1) {
                txtCustomer.setText(grViewReservation.getValueAt(i, 0).toString());
                dcsExpectedCheckIn.setDate((Date) grViewReservation.getValueAt(i, 1));
                dcsExpectedCheckOut.setDate((Date) grViewReservation.getValueAt(i, 2));
                for (Reservation r : reList) {
                    if (r.getReservationID() == (int) (grViewReservation.getValueAt(i, 5))) {
                        String[] ls = r.getExpectedRoom().split(" ");
                        txtExpectedRoom.setText(String.valueOf(getRoomNo(Integer.parseInt(ls[0]))));
                        for (int j = 1; j < ls.length; j++) {
                            txtExpectedRoom.setText(String.format("%s\n%s", txtExpectedRoom.getText(), getRoomNo(Integer.parseInt(ls[j]))));

                        }
                    }
                }

                ckbDeposit.setSelected(Boolean.parseBoolean(grViewReservation.getValueAt(i, 4).toString()));
            }
        }
    }//GEN-LAST:event_grViewReservationMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        dcsExpectedCheckIn.setDate(null);
        dcsExpectedCheckOut.setDate(null);
        txtCusGoIDS.setText(null);
        txtCusNameS.setText(null);
        txtCustomer.setText(null);
        txtExpectedRoom.setText(null);
        ckbDeposit.setSelected(false);
        model.setRowCount(0);
        initModel();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String a = txtCusNameS.getText();
        String b = txtCusGoIDS.getText();
        String name = a;
        String CMND = b;

        //code validate
        if (!a.isEmpty() && b.isEmpty()) {
            sort.setRowFilter(RowFilter.regexFilter(name, 0));
        } else if (!b.isEmpty() && a.isEmpty()) {
            sort.setRowFilter(RowFilter.regexFilter(CMND, 6));
        } else if (!a.isEmpty() && !b.isEmpty()) {
            ArrayList dk = new ArrayList();
            dk.add(RowFilter.regexFilter(name, 0));
            dk.add(RowFilter.regexFilter(CMND, 6));
            sort.setRowFilter(RowFilter.andFilter(dk));
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (btnStt) {
            if (txtCustomer.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Chọn khách hàng");
                return;
            }
            if (dcsExpectedCheckIn.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Chọn ngày nhận");
                dcsExpectedCheckIn.setDate(null);
                return;
            }
            if (dcsExpectedCheckOut.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Chọn ngày trả");
                dcsExpectedCheckOut.setDate(null);
                return;
            }
            if (dcsExpectedCheckIn.getDate().before(new Date())) {
                JOptionPane.showMessageDialog(this, "Ngày vào phải sau hôm nay");
                dcsExpectedCheckIn.setDate(new Date());
                return;
            }
            if (dcsExpectedCheckIn.getDate().after(dcsExpectedCheckOut.getDate())) {
                JOptionPane.showMessageDialog(this, "Ngày ra phải sau ngày vào");
                dcsExpectedCheckIn.setDate(null);
                dcsExpectedCheckOut.setDate(null);
                return;
            }
            if (txtExpectedRoom.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(this, "CHọn ít nhất một phòng");
                return;
            }
            tempRe.setExpectedCheckinDate(dcsExpectedCheckIn.getDate());
            tempRe.setExpectedCheckoutDate(dcsExpectedCheckOut.getDate());
            tempRe.setIsDeposit(ckbDeposit.isSelected() ? "true" : "false");
            if (new IReservationImpl().insertTan(tempRe)) {
                JOptionPane.showMessageDialog(null, "Chen thành công");
                model.setRowCount(0);
                initModel();
            } else {
                JOptionPane.showMessageDialog(null, "Chèn ko thành công");
            }
            unlockBtn();
            btnResetActionPerformed(evt);
            btnStt = false;
        } else {
            tempRe = new Reservation();
            lockBtn(btnAdd);
            btnStt = true;
            btnResetActionPerformed(evt);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int i = grViewReservation.getSelectedRow();
        if (i > -1) {
            if (JOptionPane.showConfirmDialog(null, "Bạn có muốn hủy đạt phòng không?", "Hủy thành công", JOptionPane.YES_NO_OPTION) == 0) {
                int id = (int) grViewReservation.getValueAt(i, 5);
                IReservationImpl irei = new IReservationImpl();
                if (irei.deleteTan(id)) {
                    JOptionPane.showMessageDialog(null, "Xoá thành công");
                    model.removeRow(i);
                } else {
                    JOptionPane.showMessageDialog(null, "Xóa thất bại");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Chọn một phòng đã đặt để xóa");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int i = grViewReservation.getSelectedRow();
        if (btnStt) {
            if (i > -1) {
                if (dcsExpectedCheckIn.getDate() == null) {
                    JOptionPane.showMessageDialog(this, "Chọn một ngày vào");
                    dcsExpectedCheckIn.setDate(null);
                    return;
                }
                if (dcsExpectedCheckOut.getDate() == null) {
                    JOptionPane.showMessageDialog(this, "Chọn một ngày ra");
                    dcsExpectedCheckOut.setDate(null);
                    return;
                }
                if (dcsExpectedCheckIn.getDate().before(new Date())) {
                    JOptionPane.showMessageDialog(this, "Ngày vào phải sau hôm nay");
                    dcsExpectedCheckIn.setDate(new Date());
                    return;
                }
                if (dcsExpectedCheckIn.getDate().after(dcsExpectedCheckOut.getDate())) {
                    JOptionPane.showMessageDialog(this, "Ngày ra phải sau ngày vào");
                    dcsExpectedCheckIn.setDate(null);
                    dcsExpectedCheckOut.setDate(null);
                    return;
                }
                tempRe.setReservationID((int) grViewReservation.getValueAt(i, 5));
                tempRe.setExpectedCheckinDate(dcsExpectedCheckIn.getDate());
                tempRe.setExpectedCheckoutDate(dcsExpectedCheckOut.getDate());
                tempRe.setIsDeposit(ckbDeposit.isSelected() ? "true" : "false");
                if (tempRe.getExpectedRoom() == null) {
                    for (Reservation r : reList) {
                        if (r.getReservationID() == Integer.parseInt(grViewReservation.getValueAt(i, 5).toString())) {
                            tempRe.setExpectedRoom(r.getExpectedRoom());
                        }
                    }
                }
                if (new IReservationImpl().updateTan(tempRe)) {
                    JOptionPane.showMessageDialog(null, "Cập nhật thành công");
                    model.setRowCount(0);
                    initModel();
                } else {
                    JOptionPane.showMessageDialog(null, "Cập nhật thất bại");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Chọn một phòng đã đặt");
                return;
            }
            unlockBtn();
            btnResetActionPerformed(evt);
            btnStt = false;
        } else {
            tempRe = new Reservation();
            lockBtn(btnUpdate);
            btnStt = true;
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if (btnStt) {
            txtCusGoIDS.setText(null);
            txtCusNameS.setText(null);
            txtCustomer.setText(null);
            txtExpectedRoom.setText(null);
            sort.setRowFilter(RowFilter.regexFilter("", 1));
            unlockBtn();
            btnStt = false;
        } else {
            GDNhanVien f = new GDNhanVien();
            f.setAccount(acc);
            f.setLocationRelativeTo(this);
            f.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckinActionPerformed
        if (grViewReservation.getSelectedRow() != -1) {
            Reservation tmp = null;
            for (Reservation r : reList) {
                if (r.getReservationID() == Integer.parseInt(grViewReservation.getValueAt(grViewReservation.getSelectedRow(), 5).toString())) {
                    tmp= r;
                }
            }
            if (new Date().before(tmp.getExpectedCheckinDate())) {
                JOptionPane.showMessageDialog(this, "Không thể đặt phòng");
                return;
            }
            DatPhongNgay recep = new DatPhongNgay();
            recep.setLocationRelativeTo(this);
            recep.setVisible(true);
            KTDS cl = new KTDS();
            for (Reservation r : reList) {
                if (r.getReservationID() == Integer.parseInt(grViewReservation.getValueAt(grViewReservation.getSelectedRow(), 5).toString())) {
                    cl.setReser(r);
                }
            }
            cl.setLocationRelativeTo(this);
            cl.initData();
            cl.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Chọn một phòng đã đặt để vào");
        }
    }//GEN-LAST:event_btnCheckinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatTruocP().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckin;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectCus;
    private javax.swing.JButton btnSelectRoom;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox ckbDeposit;
    private com.toedter.calendar.JDateChooser dcsExpectedCheckIn;
    private com.toedter.calendar.JDateChooser dcsExpectedCheckOut;
    private javax.swing.JTable grViewReservation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtCusGoIDS;
    private javax.swing.JTextField txtCusNameS;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextArea txtExpectedRoom;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel model;
    TableRowSorter<TableModel> sort;
    ArrayList<Reservation> reList;
    Reservation tempRe;
    boolean btnStt;
    _Account acc = new _Account();

    public void setAccount(_Account aa) {
        acc = aa;
    }

    private void initModel() {
        model = (DefaultTableModel) grViewReservation.getModel();
        sort = (TableRowSorter<TableModel>) grViewReservation.getRowSorter();
        reList = new IReservationImpl().getList();
        for (Reservation reservation : reList) {
            if (new Date(new Date().getTime() - (24 * 60 * 60 * 1000)).after(reservation.getExpectedCheckinDate())) {
                new IReservationImpl().update(reservation.getReservationID());
            }
        }
        for (Vector v : new IReservationImpl().getListTan()) {
            model.addRow(v);
        }
        txtCustomer.setEditable(false);
        txtExpectedRoom.setEditable(false);
    }

    public void lockBtn(JButton a) {
        if (a == btnAdd) {
            btnSearch.setEnabled(false);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
            btnCheckin.setEnabled(false);
            btnSelectCus.setEnabled(true);
            btnSelectRoom.setEnabled(true);
            dcsExpectedCheckIn.setEnabled(true);
            dcsExpectedCheckOut.setEnabled(true);
            btnAdd.setIcon(new ImageIcon(getClass().getResource("/image/btnSave.png")));
            btnBack.setIcon(new ImageIcon(getClass().getResource("/image/btnCancel.png")));
        }
        if (a == btnUpdate) {
            btnSearch.setEnabled(false);
            btnAdd.setEnabled(false);
            btnDelete.setEnabled(false);
            btnCheckin.setEnabled(false);
            btnSelectCus.setEnabled(true);
            btnSelectRoom.setEnabled(true);
            dcsExpectedCheckIn.setEnabled(true);
            dcsExpectedCheckOut.setEnabled(true);
            btnUpdate.setIcon(new ImageIcon(getClass().getResource("/image/btnSave.png")));
            btnBack.setIcon(new ImageIcon(getClass().getResource("/image/btnCancel.png")));
        }
    }

    public void unlockBtn() {
        btnSearch.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        btnCheckin.setEnabled(true);
        btnAdd.setEnabled(true);
        btnSelectCus.setEnabled(false);
        btnSelectRoom.setEnabled(false);
        dcsExpectedCheckIn.setEnabled(false);
        dcsExpectedCheckOut.setEnabled(false);
        btnAdd.setIcon(new ImageIcon(getClass().getResource("/image/btnAdd.png")));
        btnBack.setIcon(new ImageIcon(getClass().getResource("/image/btnBack.png")));
        btnUpdate.setIcon(new ImageIcon(getClass().getResource("/image/btnUpdate.png")));
    }

    public void fillData(Reservation r) {
        int i = grViewReservation.getSelectedRow();
        if (r.getExpectedCheckinDate() != null) {
            dcsExpectedCheckIn.setDate(r.getExpectedCheckinDate());
        }
        if (r.getExpectedCheckoutDate() != null) {
            dcsExpectedCheckOut.setDate(r.getExpectedCheckoutDate());
        }
        ckbDeposit.setSelected(r.getIsDeposit().equals("true") ? true : false);
        txtCustomer.setText(getCusName(r.getCustomerID()));
        if (r.getExpectedRoom() != null) {
            String[] ls = r.getExpectedRoom().split(" ");
            txtExpectedRoom.setText(String.valueOf(getRoomNo(Integer.parseInt(ls[0]))));
            for (int j = 1; j < ls.length; j++) {
                txtExpectedRoom.setText(String.format("%s\n%s", txtExpectedRoom.getText(), getRoomNo(Integer.parseInt(ls[j]))));
            }
        }
    }

    public String getCusName(int i) {
        for (Customer c : new ICustomerImpl().getList()) {
            if (c.getCustomerID() == i) {
                return c.getCusName();
            }
        }
        return null;
    }

    public int getRoomNo(int i) {
        for (Room c : new IRoomImpl().getList()) {
            if (c.getRoomID() == i) {
                return c.getRoomNumber();
            }
        }
        return -1;
    }
}
