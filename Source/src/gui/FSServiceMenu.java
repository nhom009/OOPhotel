package gui;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
import daoImpl.IDrinkImpl;
import daoImpl.IFoodImpl;
import daoImpl.I_ServicesImpl;
import daoImpl.IReceptionImpl;
import daoImpl.IRoomImpl;
import entities.Drink;
import entities.Food;
import entities._Services;
import entities.Reception;
import entities.Room;
import entities._Account;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class FSServiceMenu extends javax.swing.JFrame {

    /**
     * Creates new form FSServiceMenu
     */
    public static FSServiceMenu it;
    int id;

    public FSServiceMenu() {
        it = this;
        initComponents();
        initModel();
    }

    public void refresh() {
        String roomno = txtRoom.getText().trim();

        if (roomno.isEmpty() || roomno.length() > 5 || !Pattern.compile("^\\d+$").matcher(roomno).matches()) {
            JOptionPane.showMessageDialog(null, "Số phòng phải là chữ số");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            return;
        }
        int roomnumber = Integer.parseInt(roomno);
        IRoomImpl iri = new IRoomImpl();
        int flag = 0;
        for (Room r : iri.getListThong()) {
            if (r.getRoomNumber() == roomnumber) {
                id = r.getRoomID();
                IReceptionImpl irei = new IReceptionImpl();
                for (Reception re : irei.getListThong()) {
                    if (re.getRoomID() == id) {
                        String services = re.getServices();
                        String foods = re.getFoods();
                        String drinks = re.getDrinks();
                        String servicesOut[] = {};
                        String foodsOut[] = {};
                        String drinksOut[] = {};
                        if (!services.isEmpty()) {
                            servicesOut = services.split(" ");
                        }
                        if (!foods.isEmpty()) {
                            foodsOut = foods.split(" ");
                        }
                        if (!drinks.isEmpty()) {
                            drinksOut = drinks.split(" ");
                        }
                        int a = servicesOut.length;
                        int b = foodsOut.length;
                        int c = drinksOut.length;
                        int max = a;
                        if (b > max) {
                            max = b;
                        }
                        if (c > max) {
                            max = c;
                        }
                        model.setRowCount(max);
                        for (int i = 0; i < servicesOut.length; i++) {
                            I_ServicesImpl isi = new I_ServicesImpl();
                            for (_Services se : isi.getListThong()) {
                                if (se.getServiceID() == Integer.parseInt(servicesOut[i])) {
                                    model.setValueAt(se.getServiceName(), i, 0);
                                }
                            }
                        }

                        for (int j = 0; j < foodsOut.length; j++) {
                            IFoodImpl ifi = new IFoodImpl();
                            for (Food f : ifi.getListThong()) {
                                if (f.getFoodID() == Integer.parseInt(foodsOut[j])) {
                                    model.setValueAt(f.getFoodName(), j, 1);
                                }
                            }
                        }

                        for (int k = 0; k < drinksOut.length; k++) {
                            IDrinkImpl idi = new IDrinkImpl();
                            for (Drink d : idi.getListThong()) {
                                if (d.getDrinkID() == Integer.parseInt(drinksOut[k])) {
                                    model.setValueAt(d.getDrinkName(), k, 2);
                                }
                            }
                        }
                        flag = 1;
                    }
                }
            }
        }
        if (flag == 0) {
            JOptionPane.showMessageDialog(null, "Phòng này vẫn trống hoặc đã được thanh toán!");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            id = 0;
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRoom = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnOrder = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        grViewReservation = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(810, 458));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "TÌM"));

        jLabel1.setText("PHÒNG");

        txtRoom.setMaximumSize(new java.awt.Dimension(300, 20));
        txtRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoomActionPerformed(evt);
            }
        });
        txtRoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRoomFocusGained(evt);
            }
        });
        txtRoom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtRoomPropertyChange(evt);
            }
        });
        txtRoom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRoomKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRoomKeyTyped(evt);
            }
        });
        txtRoom.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtRoomVetoableChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(178, 208, 254));

        btnBack.setBackground(new java.awt.Color(153, 255, 153));
        btnBack.setText("BACK");
        btnBack.setMaximumSize(new java.awt.Dimension(90, 43));
        btnBack.setMinimumSize(new java.awt.Dimension(90, 43));
        btnBack.setPreferredSize(new java.awt.Dimension(90, 43));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(102, 255, 102));
        btnReset.setText("CẬP NHẬT");
        btnReset.setMaximumSize(new java.awt.Dimension(90, 43));
        btnReset.setMinimumSize(new java.awt.Dimension(90, 43));
        btnReset.setPreferredSize(new java.awt.Dimension(90, 43));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnOrder.setBackground(new java.awt.Color(102, 255, 102));
        btnOrder.setText("ORDER");
        btnOrder.setMaximumSize(new java.awt.Dimension(90, 43));
        btnOrder.setMinimumSize(new java.awt.Dimension(90, 43));
        btnOrder.setPreferredSize(new java.awt.Dimension(90, 43));
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(153, 255, 153));
        btnSearch.setText("TÌM KIẾM");
        btnSearch.setMaximumSize(new java.awt.Dimension(90, 43));
        btnSearch.setMinimumSize(new java.awt.Dimension(90, 43));
        btnSearch.setPreferredSize(new java.awt.Dimension(90, 43));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        grViewReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DỊCH VỤ", "ĐỒ ĂN", "NƯỚC UỐNG"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grViewReservation.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(grViewReservation);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        String ids = txtRoom.getText().trim();
//        if (id != 0) {
//            ORDERDV sv = new ORDERDV(String.valueOf(id));
//            sv.setLocationRelativeTo(this);
//            sv.setVisible(true);
//            return;
//        }

        if (ids.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Chọn phòng để order!");
            txtRoom.requestFocusInWindow();
            return;
        }

        if (ids.length() > 5 || !Pattern.compile("^\\d+$").matcher(ids).matches()) {
            JOptionPane.showMessageDialog(null, "Số phòng phải là chữ số");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            return;
        }

        int roomnumber = Integer.parseInt(ids);
        IRoomImpl iri = new IRoomImpl();
        int flag = 0;
        for (Room r : iri.getListThong()) {
            if (r.getRoomNumber() == roomnumber) {
                id = r.getRoomID();
                IReceptionImpl irei = new IReceptionImpl();
                for (Reception re : irei.getListThong()) {
                    if (re.getRoomID() == id) {
                        flag = 1;
                    }
                }
            }
        }
        if (flag == 0) {
            JOptionPane.showMessageDialog(null, "Phòng này còn trống");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            id = 0;
            return;
        }

        ORDERDV sv = new ORDERDV(ids);
        sv.setLocationRelativeTo(this);
        sv.setVisible(true);

    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String roomno = txtRoom.getText().trim();

        if (roomno.isEmpty() || roomno.length() > 5 || !Pattern.compile("^\\d+$").matcher(roomno).matches()) {
            JOptionPane.showMessageDialog(null, "Số phòng phải là chữ số");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            return;
        }
        int roomnumber = Integer.parseInt(roomno);
        IRoomImpl iri = new IRoomImpl();
        int flag = 0;
        for (Room r : iri.getListThong()) {
            if (r.getRoomNumber() == roomnumber) {
                id = r.getRoomID();
                IReceptionImpl irei = new IReceptionImpl();
                for (Reception re : irei.getListThong()) {
                    if (re.getRoomID() == id) {
                        String services = re.getServices();
                        String foods = re.getFoods();
                        String drinks = re.getDrinks();
                        String servicesOut[] = {};
                        String foodsOut[] = {};
                        String drinksOut[] = {};
                        if (!services.isEmpty()) {
                            servicesOut = services.split(" ");
                        }
                        if (!foods.isEmpty()) {
                            foodsOut = foods.split(" ");
                        }
                        if (!drinks.isEmpty()) {
                            drinksOut = drinks.split(" ");
                        }
                        int a = servicesOut.length;
                        int b = foodsOut.length;
                        int c = drinksOut.length;
                        int max = a;
                        if (b > max) {
                            max = b;
                        }
                        if (c > max) {
                            max = c;
                        }
                        model.setRowCount(max);
                        for (int i = 0; i < servicesOut.length; i++) {
                            I_ServicesImpl isi = new I_ServicesImpl();
                            for (_Services se : isi.getListThong()) {
                                if (se.getServiceID() == Integer.parseInt(servicesOut[i])) {
                                    model.setValueAt(se.getServiceName(), i, 0);
                                }
                            }
                        }

                        for (int j = 0; j < foodsOut.length; j++) {
                            IFoodImpl ifi = new IFoodImpl();
                            for (Food f : ifi.getListThong()) {
                                if (f.getFoodID() == Integer.parseInt(foodsOut[j])) {
                                    model.setValueAt(f.getFoodName(), j, 1);
                                }
                            }
                        }

                        for (int k = 0; k < drinksOut.length; k++) {
                            IDrinkImpl idi = new IDrinkImpl();
                            for (Drink d : idi.getListThong()) {
                                if (d.getDrinkID() == Integer.parseInt(drinksOut[k])) {
                                    model.setValueAt(d.getDrinkName(), k, 2);
                                }
                            }
                        }
                        flag = 1;
                    }
                }
            }
        }
        if (flag == 0) {
            JOptionPane.showMessageDialog(null, "Phòng này còn trống");
            txtRoom.setText("");
            txtRoom.requestFocusInWindow();
            id = 0;
            return;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtRoomKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRoomKeyTyped
        id = 0;
    }//GEN-LAST:event_txtRoomKeyTyped

    private void txtRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoomActionPerformed
    }//GEN-LAST:event_txtRoomActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtRoom.setText("");
        model.setRowCount(0);
        id = 0;
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtRoomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRoomKeyPressed
    }//GEN-LAST:event_txtRoomKeyPressed

    private void txtRoomFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRoomFocusGained
        txtRoom.setText("");
    }//GEN-LAST:event_txtRoomFocusGained

    private void txtRoomPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtRoomPropertyChange
    }//GEN-LAST:event_txtRoomPropertyChange

    private void txtRoomVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtRoomVetoableChange
    }//GEN-LAST:event_txtRoomVetoableChange

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        GDNhanVien f = new GDNhanVien();
        f.setAccount(acc);
        f.setLocationRelativeTo(this);
        f.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FSServiceMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTable grViewReservation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtRoom;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel model;
    TableRowSorter<TableModel> sorter;
    _Account acc = new _Account();

    public void setAccount(_Account aa) {
        acc = aa;
    }

    private void initModel() {
        txtRoom.requestFocusInWindow();
        model = (DefaultTableModel) grViewReservation.getModel();
    }
}
