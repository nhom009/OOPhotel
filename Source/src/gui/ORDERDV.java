package gui;

import bill.VDrink;
import bill.VFood;
import bill.VRoom;
import bill.VService;
import daoImpl.IDrinkImpl;
import daoImpl.IFoodImpl;
import daoImpl.I_ServicesImpl;
import daoImpl.IReceptionImpl;
import daoImpl.IRoomImpl;
import entities.Drink;
import entities.Food;
import entities._Services;
import entities.Reception;
import entities.Room;
import java.io.File;
import java.io.FileInputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
public class ORDERDV extends javax.swing.JFrame {

    /**
     * Creates new form FSServices
     */
    public ORDERDV(String s) {
        initComponents();
        lbRoomName.setText(s);
        initModel();
        initModels();

    }
    String servName, foName, driName;
    int roNo;

    public ORDERDV() {
    }
    DefaultListModel<String> modelMenu, modelOrder;

    private void initModel() {
        modelOrder = new DefaultListModel<>();
        lstUser.setModel(modelOrder);

    }
    String servicesOut[] = {};
    String foodsOut[] = {};
    String drinksOut[] = {};
    int flags = 0;
    int flagf = 0;
    int flagd = 0;

    private void initModels() {

        I_ServicesImpl isi = new I_ServicesImpl();

        modelMenu = new DefaultListModel<>();
        I_ServicesImpl s = new I_ServicesImpl();
        for (_Services item1 : s.getListThong()) {
            modelMenu.addElement(item1.getServiceName());
        }
        lstMenu.setModel(modelMenu);
        modelOrder.clear();
        if (flags == 1) {

            if (servicesOut.length > 0) {
                for (int i = 0; i < servicesOut.length; i++) {
                    for (_Services item1 : isi.getListThong()) {
                        if (item1.getServiceID() == Integer.parseInt(servicesOut[i])) {
                            modelOrder.addElement(item1.getServiceName());
                        }
                    }
                }
            }
        }
    }

    private void initModeld() {

        IDrinkImpl idi = new IDrinkImpl();
        modelMenu = new DefaultListModel<>();
        IDrinkImpl d = new IDrinkImpl();
        for (Drink item3 : d.getListThong()) {
            modelMenu.addElement(item3.getDrinkName());
        }
        lstMenu.setModel(modelMenu);
        modelOrder.clear();
        if (flagd == 1) {
            if (drinksOut.length > 0) {
                for (int i = 0; i < drinksOut.length; i++) {
                    for (Drink item1 : idi.getListThong()) {
                        if (item1.getDrinkID() == Integer.parseInt(drinksOut[i])) {
                            modelOrder.addElement(item1.getDrinkName());
                        }
                    }
                }
            }
        }

    }

    private void initModelf() {

        IFoodImpl ifi = new IFoodImpl();
        modelMenu = new DefaultListModel<>();
        IFoodImpl f = new IFoodImpl();
        for (Food item2 : f.getListThong()) {
            modelMenu.addElement(item2.getFoodName());
        }
        lstMenu.setModel(modelMenu);
        modelOrder.clear();
        if (flagf == 1) {
            if (foodsOut.length > 0) {
                for (int i = 0; i < foodsOut.length; i++) {
                    for (Food item1 : ifi.getListThong()) {
                        if (item1.getFoodID() == Integer.parseInt(foodsOut[i])) {
                            modelOrder.addElement(item1.getFoodName());
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUser = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstMenu = new javax.swing.JList();
        cbbType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbRoomName = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "Order DỊCH VỤ"));

        jScrollPane1.setViewportView(lstUser);

        jScrollPane2.setViewportView(lstMenu);

        cbbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DỊCH VỤ", "ĐỒ ĂN", "NƯỚC UỐNG" }));
        cbbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTypeActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("LOẠI DV");

        btnAdd.setText("THÊM");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("HỦY");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PHÒNG");

        btnSubmit.setText("OK");
        btnSubmit.setMaximumSize(new java.awt.Dimension(90, 23));
        btnSubmit.setMinimumSize(new java.awt.Dimension(90, 23));
        btnSubmit.setPreferredSize(new java.awt.Dimension(90, 23));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnCancel.setText("THOÁT");
        btnCancel.setMaximumSize(new java.awt.Dimension(90, 23));
        btnCancel.setMinimumSize(new java.awt.Dimension(90, 23));
        btnCancel.setPreferredSize(new java.awt.Dimension(90, 23));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbbType, 0, 90, Short.MAX_VALUE)
                                    .addComponent(lbRoomName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(299, 299, 299))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbRoomName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(47, 47, 47)
                                .addComponent(btnRemove)
                                .addGap(97, 97, 97)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTypeActionPerformed
        if (cbbType.getSelectedIndex() == 0) {
            initModels();
        } else if (cbbType.getSelectedIndex() == 1) {
            initModelf();
        } else if (cbbType.getSelectedIndex() == 2) {
            initModeld();
        }
    }//GEN-LAST:event_cbbTypeActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        for (Object item : lstMenu.getSelectedValuesList()) {
            modelOrder.addElement(item.toString());
        }

        I_ServicesImpl isi = new I_ServicesImpl();
        IFoodImpl ifi = new IFoodImpl();
        IDrinkImpl idi = new IDrinkImpl();

        String services = "";
        String foods = "";
        String drinks = "";

        for (_Services se : isi.getListThong()) {
            for (int i = 0; i < modelOrder.size(); i++) {
                if (se.getServiceName().matches(modelOrder.getElementAt(i))) {
                    if (services.isEmpty()) {
                        services = String.valueOf(se.getServiceID());
                        flags = 1;
                    } else {
                        services = services + " " + String.valueOf(se.getServiceID());
                        flags = 1;
                    }
                }
            }
        }

        for (Food f : ifi.getListThong()) {
            for (int i = 0; i < modelOrder.size(); i++) {
                if (f.getFoodName().matches(modelOrder.getElementAt(i))) {
                    if (foods.isEmpty()) {
                        foods = String.valueOf(f.getFoodID());
                        flagf = 1;
                    } else {
                        foods = foods + " " + String.valueOf(f.getFoodID());
                        flagf = 1;
                    }
                }
            }
        }
        for (Drink d : idi.getListThong()) {
            for (int i = 0; i < modelOrder.size(); i++) {
                if (d.getDrinkName().matches(modelOrder.getElementAt(i))) {
                    if (drinks.isEmpty()) {
                        drinks = String.valueOf(d.getDrinkID());
                        flagd = 1;
                    } else {
                        drinks = drinks + " " + String.valueOf(d.getDrinkID());
                        flagd = 1;
                    }
                }
            }
        }

        if (!services.isEmpty()) {
            servicesOut = services.split(" ");
        }
        if (!foods.isEmpty()) {
            foodsOut = foods.split(" ");
        }
        if (!drinks.isEmpty()) {
            drinksOut = drinks.split(" ");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        I_ServicesImpl isi = new I_ServicesImpl();
        IFoodImpl ifi = new IFoodImpl();
        IDrinkImpl idi = new IDrinkImpl();
        String services = "";
        String foods = "";
        String drinks = "";
        if (lstUser.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Chọn dịch vụ để xóa");
            return;
        }
        modelOrder.remove(lstUser.getSelectedIndex());

        if (cbbType.getSelectedIndex() == 0) {
            for (_Services se : isi.getListThong()) {
                if (modelOrder.size() == 0) {
                    services = " ";
                    break;
                }
                for (int i = 0; i < modelOrder.size(); i++) {
                    if (se.getServiceName().matches(modelOrder.getElementAt(i))) {
                        if (services.isEmpty()) {
                            services = String.valueOf(se.getServiceID());
                        } else {
                            services = services + " " + String.valueOf(se.getServiceID());
                        }
                    }
                }

            }
        } else if (cbbType.getSelectedIndex() == 1) {
            for (Food f : ifi.getListThong()) {
                if (modelOrder.size() == 0) {
                    foods = " ";
                    break;
                }
                for (int i = 0; i < modelOrder.size(); i++) {
                    if (f.getFoodName().matches(modelOrder.getElementAt(i))) {
                        if (foods.isEmpty()) {
                            foods = String.valueOf(f.getFoodID());
                        } else {
                            foods = foods + " " + String.valueOf(f.getFoodID());
                        }
                    }
                }

            }
        } else if (cbbType.getSelectedIndex() == 2) {
            for (Drink d : idi.getListThong()) {
                if (modelOrder.size() == 0) {
                    drinks = " ";
                    break;
                }
                for (int i = 0; i < modelOrder.size(); i++) {
                    if (d.getDrinkName().matches(modelOrder.getElementAt(i))) {
                        if (drinks.isEmpty()) {
                            drinks = String.valueOf(d.getDrinkID());
                        } else {
                            drinks = drinks + " " + String.valueOf(d.getDrinkID());
                        }
                    }
                }

            }
        }

        if (!services.isEmpty()) {
            servicesOut = services.split(" ");            
        }
        if (!foods.isEmpty()) {
            foodsOut = foods.split(" ");
        }
        if (!drinks.isEmpty()) {
            drinksOut = drinks.split(" ");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        String services = "";
        String foods = "";
        String drinks = "";

        if (servicesOut.length==0 && foodsOut.length==0 && drinksOut.length==0) {
            JOptionPane.showMessageDialog(null, "Chọn dịch vụ để order!");
            return;
        }
        int id = getRoomID(Integer.parseInt(lbRoomName.getText()));
        I_ServicesImpl isi = new I_ServicesImpl();
        IFoodImpl ifi = new IFoodImpl();
        IDrinkImpl idi = new IDrinkImpl();
        IReceptionImpl iri = new IReceptionImpl();
        for (Reception re : iri.getListThong()) {
            if (re.getRoomID() == id) {
                services = re.getServices();
                foods = re.getFoods();
                drinks = re.getDrinks();
            }
        }
        //for (_Services se : isi.getListThong()) {
        //for (int i = 0; i < modelOrder.size(); i++) {
        //if (se.getServiceName().matches(modelOrder.getElementAt(i))) {
        for (int i = 0; i < servicesOut.length; i++) {
            if (services.isEmpty()) {
                services = String.valueOf(servicesOut[i]);
            } else {
                services = services + " " + String.valueOf(servicesOut[i]);
            }
        }
        //}
        //}
        //}
        //for (Food f : ifi.getListThong()) {
        //for (int i = 0; i < modelOrder.size(); i++) {
        //if (f.getFoodName().matches(modelOrder.getElementAt(i))) {
        for (int i = 0; i < foodsOut.length; i++) {
            if (foods.isEmpty()) {
                foods = String.valueOf(foodsOut[i]);
            } else {
                foods = foods + " " + String.valueOf(foodsOut[i]);
            }
        }
        //}
        //}
        //}
        //for (Drink d : idi.getListThong()) {
        //for (int i = 0; i < modelOrder.size(); i++) {
        //if (d.getDrinkName().matches(modelOrder.getElementAt(i))) {
        for (int i = 0; i < drinksOut.length; i++) {
            if (drinks.isEmpty()) {
                drinks = String.valueOf(drinksOut[i]);
            } else {
                drinks = drinks + " " + String.valueOf(drinksOut[i]);
            }
        }
        //}
        //}
        //}

        Reception r = new Reception(id, id, id, id, null, null, null, services, foods, drinks, null, null);
        if (iri.updateThong(r)) {
            report();
            JOptionPane.showMessageDialog(null, "Cập nhật thành công");
        } else {
            JOptionPane.showMessageDialog(null, "Cập nhật thất bại");
        }

        modelOrder.clear();
        FSServiceMenu.it.refresh();
        this.dispose();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ORDERDV().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbRoomName;
    private javax.swing.JList lstMenu;
    private javax.swing.JList lstUser;
    // End of variables declaration//GEN-END:variables

    public Collection serv() {
        Vector v = new Vector();
        for (int a = 0; a < servicesOut.length; a++) {
            for (_Services s : new I_ServicesImpl().getListThong()) {
                if (servicesOut[a].equals(String.valueOf(s.getServiceID()))) {
                    servName = s.getServiceName();
                    v.add(new VService(servName));
                }
            }
        }
        return v;
    }

    public Collection fo() {
        Vector v = new Vector();

        for (int a = 0; a < foodsOut.length; a++) {
            for (Food s : new IFoodImpl().getListThong()) {
                if (foodsOut[a].equals(String.valueOf(s.getFoodID()))) {
                    foName = s.getFoodName();
                    v.add(new VFood(foName));
                }
            }

        }
        return v;
    }

    public Collection dri() {
        Vector v = new Vector();
        for (int a = 0; a < drinksOut.length; a++) {
            for (Drink s : new IDrinkImpl().getListThong()) {
                if (drinksOut[a].equals(String.valueOf(s.getDrinkID()))) {
                    driName = s.getDrinkName();
                    v.add(new VDrink(driName));
                }
            }
        }
        return v;
    }

    public Collection room() {
        Vector v = new Vector();
        roNo = Integer.parseInt(lbRoomName.getText());
        v.add(new VRoom(roNo));

        return v;
    }

    public void report() {
        try {
            String s = "report/order.jasper";
            File f = new File(s);
            FileInputStream fis = new FileInputStream(f);
            //JasperReport jr = JasperCompileManager.compileReport(fis);
            Map<String, Object> map = new HashMap<>();
            map.put("Service", new JRBeanCollectionDataSource(serv()));
            map.put("Food", new JRBeanCollectionDataSource(fo()));
            map.put("Drink", new JRBeanCollectionDataSource(dri()));
            JasperPrint jp = JasperFillManager.fillReport(fis, map, new JRBeanCollectionDataSource(room()));
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public int getRoomID(int i) {
        for (Room c : new IRoomImpl().getList()) {
            if (c.getRoomNumber() == i) {
                return c.getRoomID();
            }
        }
        return -1;
    }
}
